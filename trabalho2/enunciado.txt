Objetivo 
O objetivo deste trabalho é implementar a operação do produto de matrizes a partir da 
implementação da versão otimizada do produto de matrizes. Nenhuma mudança deve ser realizada 
no  módulo  matrix_lib_test.c  do  programa  base  já  implementado  e  testado.  Apenas  as 
funções  matrix_matrix_mult  e  scalar_matrix_mult  do  módulo  matrix_lib.c  devem 
sofrer alterações. 
O  programa de  teste  obtém  o  tempo  antes da  chamada de uma função  da  biblioteca  e depois do 
retorno da função para calcular os tempos parciais da execução de cada função. Todas as tomadas 
de tempo e impressão das medidas de tempo devem ser realizadas na função  main do programa 
de teste. 
Parte I: 
Aprimorar  o  módulo  escrito  utilizando  a  plataforma  CUDA  da  Nvidia,  chamado  matrix_lib.c, 
implementado em sala de aula, com a utilização de processamento. As duas funções de operações 
aritméticas com matrizes estão descritas a seguir. 
Crie um módulo escrito em linguagem C, chamado  matrix_lib.c, que implemente duas funções 
para fazer operações aritméticas com matrizes, conforme descrito abaixo. 
a. Função int scalar_matrix_mult(float scalar_value, struct  matrix 
*matrix, struct matrix *result) 
Essa função recebe um valor escalar e uma matriz como argumentos de entrada e calcula o 
produto  do  valor  escalar  pela  matriz  e  o  armazena  na  matriz  recebida  como  terceiro 
parâmetro.  Em  caso  de  sucesso,  a  função  deve  retornar  o  valor  0.  Em  caso  de  erro,  a 
função  deve  retornar  o  código  de  erro  correspondente.  Esta  função  irá  executar  no  host  e 
chamar uma função no device. 

b. Função int matrix_matrix_mult(struct matrix *matrixA, struct matrix * 
matrixB, struct matrix * matrixC) 
Essa função recebe três matrizes como argumentos de entrada e calcula o valor do produto 
da matriz A pela matriz B utilizando o algoritmo otimizado apresentado em aula. O resultado 
da  operação  deve  ser  armazenado  na  matriz  C.  Em  caso  de  sucesso,  a  função  deve 
retornar o valor 0. Em caso de erro, a função deve retornar o código de erro correspondente. 
Esta função irá executar no host e chamar uma função no device. 
c. O tipo estruturado matrix é definido da seguinte forma: 
typedef struct { 
 unsigned long int rows; 
 unsigned long int cols; 
 float *values; 
} matrix; 
Onde: 
rows = número de linhas da matriz (múltiplo de 8) 
cols = número de colunas da matriz (múltiplo de 8) 
values = sequência de linhas da matriz (rows*cols elementos) 
d. Ambas funções devem chamar funções no device para realizar a computação necessária. O 
módulo  principal  irá  criar  duas  variáveis  globais  threadsPerBlock  e  blocksPerGrid, 
representando respectivamente o número de  threads por bloco e o número de blocos para 
ser utilizado na chamada das funções que irão executar no device. 
Obs.: o número de threads é múltiplo ou divisível pelo número de linhas ou colunas das matrizes.
